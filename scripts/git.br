#!/bin/bash
# git.br

shopt -s nullglob dotglob     # To include hidden files. Needed?
echo; echo "Welcome to Bashful Rails command line extension for git"; echo

if (( $# == 0 )); then 
   echo; echo "The first argument dictates what task you want to execute:"
   echo "Run any of these without a second argument to get more information:"

elif (( $# > 0 )); then 
   
   #  BEGIN - find git project root and cd to it:
   DIR=${PWD}
   TARGET="$DIR/.git"
   # This checks if the current working directory contains .git/  
   until [ "$(ls -a $TARGET 2> /dev/null)" ] # 2> /dev/null suppresses errors
    do
      DIR=`dirname $DIR` # .git not found. move up
      TARGET="$DIR/.git" 
      if [ $DIR = "/" ]; then 
         break;
      fi
   done
   if [ $DIR = "/" ]; then 
      echo "error: no git project found"; echo
    else
      cd $DIR
      proj=${PWD##*/} 
      remote='origin'
      branch=`git rev-parse --abbrev-ref HEAD`
      msg=''
      input=''
   fi
   #  END - find git project root and cd to it
   
###### git.br save -------------------------------------------------------######
   if [ $1 == "save" ]; then
      
      if (( $# == 1 )); then 
         echo; echo "This will run:"
         printf "\t$ git status; git add . -A; git status # with prompt to continue!\n"
         printf "\t$ git commit -m 'your 3nd arg'         # you'll have a chance to revise the message\n"
         printf "\t$ git push [4th-arg] ${branch}          # if you don't arg 4, 'origin' will be used\n\n" 
         echo "You do not need to be at the project's root directory for this command"; echo
      fi
      if (( $# > 1 )); then msg="$2"
         if (( $# > 2 )); then remote="$3";
            if (( $# > 3 )); then branch="$4"; fi
         fi
         while true; do
            printf "\nroot:\t'${proj}'\nbranch:\t'${branch}'\nremote:\t'${remote}'\nmessage\t'${msg}'"
            printf "\n\n [b] to change branch\t[n] to change to new branch\t[r] to change remote\t[m] to change message"
            printf "\n\n [b?] to show branches\t[r?] to show remotes\t[nr] to add remote"
            printf "\n\n [enter] to add . -A\t[ctrl-c] abort\n\nyour selection: "
            read selection
            if [ $selection == "b" ]; then
               printf "enter branch name: "
               read temp 
               if [ $temp != $branch ]; then
                  branch=$temp
                  git checkout $branch
               fi
             elif [ $selection == "n" ]; then
               printf "enter new branch name: "
               read temp
               if [ $temp != $branch ]; then 
                  branch=$temp
                  git checkout -b $branch
               fi
             elif [ $selection == "r" ]; then
               printf "enter a new remote: "; read remote
             elif [ $selection == "m" ]; then
               printf "enter message surrounded by quotes: "; read msg
             elif [[ -z $selection ]]; then break;
             else printf "huh?\n"
            fi
         done
         
         git status; git add . -A; git status;
         temp=''
         printf "\n\n [enter] to push\t[ctrl-c] abort\n\nyour selection: "
         read input
         if [[ -n $temp ]]; then
            git commit -m "$msg"; git push $remote $branch;
          else
            git commit -m "$msg"; git push $remote $branch;
         fi
      fi
   fi
###### git.br c -------------------------------------------------------######
   # if [ $1 == "c" ]; then
   # echo; 
   # fi
fi


# alias gmv='git mv'                                  # gmv git mv;
# alias gc='git checkout'                             # gc  git checkout;  
# alias gs='git status'                               # gs  git status;  
# alias gu='git checkout --force; git status'         # gu  git undo
# alias gm='git merge'                                # gm  git merge;  
# alias gb='git branch'                               # gb  git branch;
# alias ga='git add . -A; git status'                 # ga  git add;  
# alias gac='ga; gcm'                                 # same as gacm;
# alias gcm='git commit -m'                           # gcm git commit message;
# alias gce='git commit'                              # gcm git commit (editor);
# alias gacm='ga; gcm'                                # gacm git add commit message;
# alias gace='ga; gce'                                # gace git add commit (editor);
# alias gracm='rpa; ga; gcm'                          # gracm git rails add commit message;
# alias grace='rpa; ga; gce'                          # grace git rails add commit (editor);
# alias gp='git push'                                 # gp git push;
# alias gph='git push heroku'                         # gph git push heroku;
# alias gpo='git push origin'                         # gpo git push origin;